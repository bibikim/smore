<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gdu.smore.mapper.AdminMapper">

 	<resultMap type="AccessLogDTO" id="AccessLogMap">
		<result column="ACCESS_LOG_NO" property="accessLogNo" />
		<result column="ID" property="id" />
		<result column="LAST_LOGIN_DATE" property="lastLoginDate" />
	</resultMap>
	<resultMap type="SleepUserDTO" id="SleepUserMap">
		<result column="USER_NO" property="userNo" />
		<result column="ID" property="id" />
		<result column="PW" property="pw" />
		<result column="NAME" property="name"/>
		<result column="GRADE" property="grade"/>
		<result column="GENDER" property="gender" />
		<result column="EMAIL" property="email" />
		<result column="MOBILE" property="mobile"/>
		<result column="BIRTHYEAR" property="birthyear" />
		<result column="BIRTHDAY" property="birthday" />
		<result column="POSTCODE" property="postcode" />
		<result column="ROAD_ADDRESS" property="roadAddress" />
		<result column="JIBUN_ADDRESS" property="jibunAddress" />
		<result column="DETAIL_ADDRESS" property="detailAddress" />
		<result column="EXTRA_ADDRESS" property="extraAddress" />
		<result column="AGREE_CODE" property="agreeCode" />
		<result column="SNS_TYPE" property="snsType"/>	
		<result column="USER_STATE" property="userState" />
		<result column="JOIN_DATE" property="joinDate" />
		<result column="LAST_LOGIN_DATE" property="lastLoginDate" />
		<result column="SLEEP_DATE" property="sleepDate" />
	</resultMap>
	<resultMap type="UserDTO" id="UserMap">
		<result column="ROW_NUM" property="rowNum" />
		<result column="USER_NO" property="userNo" />
		<result column="ID" property="id" />
		<result column="PW" property="pw" />
		<result column="NAME" property="name" />
		<result column="NICKNAME" property="nickname" />
		<result column="GRADE" property="grade" />
		<result column="GENDER" property="gender" />
		<result column="EMAIL" property="email" />
		<result column="MOBILE" property="mobile" />
		<result column="BIRTH_YEAR" property="birthYear" />
		<result column="BIRTHDAY" property="birthday" />
		<result column="POSTCODE" property="postcode" />
		<result column="ROAD_ADDRESS" property="roadAddress" />
		<result column="JIBUN_ADDRESS" property="jibunAddress" />
		<result column="DETAIL_ADDRESS" property="detailAddress" />
		<result column="EXTRA_ADDRESS" property="extraAddress" />
		<result column="AGREE_CODE" property="agreeCode" />
		<result column="SNS_TYPE" property="snsType" />
		<result column="JOIN_DATE" property="joinDate" />
		<result column="PW_MODIFY_DATE" property="pwModifyDate" />
		<result column="INFO_MODIFY_DATE" property="infoModifyDate" />
		<result column="SESSION_ID" property="sessionId" />
		<result column="SESSION_LIMIT_DATE" property="sessionLimitDate" />
		<result column="BLACK_CNT" property="blackCnt" />
		<result column="USER_STATE" property="userState" />
		<collection resultMap="AccessLogMap" property="accessLogDTO"></collection>
	</resultMap>
	<resultMap type="AllUserDTO" id="AllUserMap">
		<result column="ROW_NUM" property="rowNum" />
		<collection resultMap="UserMap" property="userDTO"></collection>
		<collection resultMap="SleepUserMap" property="sleepUserDTO"></collection>
		<collection resultMap="AccessLogMap" property="accessLogDTO"></collection>
	</resultMap> 

	


	<select id="selectUserCount" resultType="int">
		SELECT COUNT(*)
		  FROM USERS
	</select>
	
	<select id="selectSleepUserCount" resultType="int">
		SELECT COUNT(*)
		  FROM SLEEP_USERS
	</select>
		
	<select id="selectReportUserCount" resultType="int">
		SELECT COUNT(*)
		  FROM REDBELL
	</select>
	
	<select id="selectFreeBoardCount" resultType="int">
		SELECT COUNT(*)
		  FROM FREEBOARD
	</select>
	
	<select id="selectSGroupBoardCount" resultType="int">
		SELECT COUNT(*)
		  FROM S_GROUP
	</select>
	
	<select id="selectCodeBoardCount" resultType="int">
		SELECT COUNT(*)
		  FROM C_BOARD
	</select>
		
	<select id="selectQnaBoardCount" resultType="int">
		SELECT COUNT(*)
		  FROM Q_BOARD
	</select>	
		   	
	 <select id="selectUserByNo" parameterType="int" resultType="UserDTO">
	 	SELECT USER_NO, ID, JOIN_DATE
	 	  FROM USERS 
	 	 WHERE USER_NO = #{userNo}
	 </select> 
	
	
	<!-- 검색기능 -->
 	<select id="selectUsersByQuery" parameterType="map" resultMap="AllUserMap">
		SELECT  D.ROW_NUM, D.USER_NO, D.ID, D.NAME, D.NICKNAME, D.GENDER, D.JOIN_DATE, D.LAST_LOGIN_DATE, D.USER_STATE 
  		  FROM (SELECT ROW_NUMBER() OVER(ORDER BY JOIN_DATE DESC) AS ROW_NUM, C.USER_NO, C.ID, C.NAME, C.NICKNAME, C.GENDER, C.LAST_LOGIN_DATE, C.USER_STATE, C.JOIN_DATE
                  FROM (SELECT U.USER_NO, U.ID, U.NAME, U.NICKNAME, U.GENDER, U.JOIN_DATE, A.LAST_LOGIN_DATE, U.USER_STATE  
		                  FROM USERS U LEFT OUTER JOIN ACCESS_LOG A
		                    ON U.ID = A.ID
         UNION ALL
        SELECT USER_NO, ID, NAME, NICKNAME, GENDER, JOIN_DATE, LAST_LOGIN_DATE, USER_STATE 
          FROM SLEEP_USERS) C) D
    	<where>
    		 <!-- D.ROW_NUM BETWEEN #{begin} AND #{end}  --> 		
   		  <if test="column=='ID' or column == 'NICKNAME'">AND ${column} LIKE CONCAT('%', #{query}, '%')</if> 
		  <!-- <if test="column=='JOIN_DATE'">${column} BETWEEN STR_TO_DATE(#{start}, '%Y-%m-%d') AND  STR_TO_DATE(#{stop}, '%Y-%m-%d') -->
		  <if test="column=='JOIN_DATE'">AND ${column} >= STR_TO_DATE(#{start}, '%Y-%m-%d') AND  ${column} <![CDATA[<]]> STR_TO_DATE(#{stop}, '%Y-%m-%d') + 1</if>
		</where> 
	</select>   
			
	<select id="selectAllUserCountByQuery" parameterType="Map" resultType="int">
	     SELECT COUNT(*) + (SELECT COUNT(*) FROM SLEEP_USERS)
	       FROM USERS 
	<where>
	 	<!-- <if test="column=='ID'">AND ${column} = #{query}  </if>  -->	 
	 	<!-- <if test="column=='ID'">AND ${column} LIKE '%' #{query} '%' </if>  -->
	 	<!-- <if test="column=='JOIN_DATE' or column=='SLEEP_DATE'">AND ${column} BETWEEN STR_TO_DATE(#{start}, '%Y-%m-%d') STR_TO_DATE(#{stop}, '%Y-%m-%d')</if> --> 
	 	<if test="column=='ID'">
	 		${column} LIKE CONCAT('%', #{query}, '%')
	 	</if>
	 	<if test="column=='JOIN_DATE'">
	 		AND ${column} >= STR_TO_DATE(#{start}, '%Y-%m-%d') AND  ${column} <![CDATA[<]]> STR_TO_DATE(#{stop}, '%Y-%m-%d') + 1
	 	</if> 
 	</where> 	 
	</select>
	
	<!-- 자유게시판 검색 -->
	<select id="selectFreeBoardByQuery" parameterType="map" resultType="FreeBoardDTO">
		SELECT D.ROW_NUM, D.FREE_NO, D.NICKNAME, D.TITLE, D.CONTENT, D.CREATE_DATE, D.MODIFY_DATE, D.HIT, D.IP
		  FROM (SELECT ROW_NUMBER() OVER(ORDER BY FREE_NO DESC) AS ROW_NUM FREE_NO, NICKNAME, TITLE, CONTENT, CREATE_DATE, MODIFY_DATE, HIT, IP
		          FROM FREEBOARD
		 <where>
		 	<if test="column =='ID' or column=='TITLE' or column=='CONTENT'">
		 		${column} LIKE CONCAT('%', #{query}, '%')
		 	</if>
		 	<if test="column=='CREATE_DATE'">
		 		AND ${column} >= STR_TO_DATE(#{start}, '%Y-%m-%d') AND  ${column} <![CDATA[<]]> STR_TO_DATE(#{stop}, '%Y-%m-%d') + 1
			</if>
			D.ROW_NUM BETWEEN #{begin} AND #{end}
		 </where>
			) D
	</select>
	
	<select id="selectFreeBoardByCountQuery">
		SELECT COUNT(*)
		  FROM FREEBOARD
 		 <where>
		 	<if test="column =='ID' or column=='TITLE' or column=='CONTENT'">
		 		${column} LIKE CONCAT('%', #{query}, '%')
		 	</if>
		 	<if test="column=='CREATE_DATE'">
		 		AND ${column} >= STR_TO_DATE(#{start}, '%Y-%m-%d') AND  ${column} <![CDATA[<]]> STR_TO_DATE(#{stop}, '%Y-%m-%d') + 1
			</if>
		 </where> 
	</select>
	
	<select id="selectAllUserList" parameterType="map" resultMap="AllUserMap">
<!-- 		SELECT B.ROW_NUM, B.USER_NO, B.ID, B.NAME, B.NICKNAME, B.GENDER, B.JOIN_DATE, B.USER_STATE, B.LAST_LOGIN_DATE, NULL SLEEP_DATE
		  FROM (SELECT ROW_NUMBER() OVER(ORDER BY USER_NO DESC) AS ROW_NUM, U.USER_NO, U.ID, U.NAME, U.NICKNAME, U.GENDER, U.JOIN_DATE, U.USER_STATE, U.INFO_MODIFY_DATE, A.LAST_LOGIN_DATE
		  		  FROM USERS U LEFT OUTER JOIN ACCESS_LOG A
                    		ON U.ID = A.ID) B	
        WHERE B.ROW_NUM BETWEEN #{begin} AND #{end}
           			 
		UNION ALL
		 
		 SELECT B.ROW_NUM, B.USER_NO, B.ID, B.NAME, B.NICKNAME, B.GENDER, B.JOIN_DATE, B.USER_STATE, B.LAST_LOGIN_DATE, B.SLEEP_DATE
		   FROM (SELECT ROW_NUMBER() OVER(ORDER BY USER_NO DESC) AS ROW_NUM, U.USER_NO, U.ID, U.NAME, U.NICKNAME, U.GENDER, U.JOIN_DATE, U.USER_STATE, U.LAST_LOGIN_DATE, U.SLEEP_DATE
		  		  FROM SLEEP_USERS U) B
		  WHERE B.ROW_NUM BETWEEN #{begin} AND #{end}  -->
		SELECT  D.ROW_NUM, D.USER_NO, D.ID, D.NAME, D.NICKNAME, D.GENDER, D.JOIN_DATE , D.LAST_LOGIN_DATE, D.USER_STATE 
  		  FROM (SELECT ROW_NUMBER() OVER(ORDER BY JOIN_DATE DESC) AS ROW_NUM, C.USER_NO, C.ID, C.NAME, C.NICKNAME, C.GENDER, C.LAST_LOGIN_DATE, C.USER_STATE, C.JOIN_DATE
                  FROM (SELECT U.USER_NO, U.ID, U.NAME, U.NICKNAME, U.GENDER, U.JOIN_DATE, A.LAST_LOGIN_DATE, U.USER_STATE  
		                  FROM USERS U LEFT OUTER JOIN ACCESS_LOG A
		                    ON U.ID = A.ID
         UNION ALL
        SELECT USER_NO, ID, NAME, NICKNAME, GENDER, JOIN_DATE, LAST_LOGIN_DATE, USER_STATE
          FROM SLEEP_USERS) C) D 
		 WHERE D.ROW_NUM BETWEEN #{begin} AND #{end} 		  		  
	</select>

	<!-- 일반유저 조회 -->
	<select id="selectUserListByMap" parameterType="map" resultType="UserDTO">
		SELECT B.ROW_NUM, B.USER_NO, B.ID, B.NAME, B.NICKNAME, B.GENDER, B.JOIN_DATE, B.USER_STATE, B.INFO_MODIFY_DATE, B.LAST_LOGIN_DATE
		  FROM (SELECT ROW_NUMBER() OVER(ORDER BY USER_NO DESC) AS ROW_NUM, U.USER_NO, U.ID, U.NAME, U.NICKNAME, U.GENDER, U.JOIN_DATE, U.USER_STATE, U.INFO_MODIFY_DATE, A.LAST_LOGIN_DATE
		  		  FROM USERS U LEFT OUTER JOIN ACCESS_LOG A
                    		ON U.ID = A.ID) B
		 WHERE B.ROW_NUM BETWEEN #{begin} AND #{end} 		  
	</select>

	<!-- 휴면유저 조회 -->
	<select id="selectSleepUserListByMap" parameterType="map" resultType="SleepUserDTO">
		SELECT B.ROW_NUM, B.USER_NO, B.ID, B.NAME, B.GENDER, B.JOIN_DATE, B.LAST_LOGIN_DATE, B.SLEEP_DATE
		  FROM (SELECT ROW_NUMBER() OVER(ORDER BY USER_NO DESC) AS ROW_NUM, U.USER_NO, U.ID, U.NAME, U.GENDER, U.JOIN_DATE, U.LAST_LOGIN_DATE, U.SLEEP_DATE
		  		  FROM SLEEP_USERS U) B
		 WHERE B.ROW_NUM BETWEEN #{begin} AND #{end} 		  
	</select> 
		
	<!-- 자유게시판 조회 -->
	<select id="selectFreeListByMap" parameterType="Map" resultType="FreeBoardDTO">
	    SELECT N.ROW_NUM, N.FREE_NO, N.NICKNAME, N.TITLE, N.CONTENT, N.CREATE_DATE, N.MODIFY_DATE, N.HIT, N.IP
		  FROM (SELECT ROW_NUMBER() OVER(ORDER BY FREE_NO DESC) AS ROW_NUM, FREE_NO, NICKNAME, TITLE, CONTENT, CREATE_DATE, MODIFY_DATE, HIT, IP
		  		FROM FREEBOARD) N
		 WHERE N.ROW_NUM BETWEEN #{begin} AND #{end}
	</select>
	
	<!-- 스터디모집게시판 조회 -->
	<select id="selectStudyListByMap" parameterType="Map" resultType="StudyGroupDTO">
		SELECT A.ROW_NUM, A.STUD_NO, A.NICKNAME, A.TITLE, A.CONTENT, A.CREATE_DATE, A.MODIFY_DATE, A.HIT, A.GENDER, A.REGION, A.WIDO, A.GDO, A.LANG, A.PEOPLE, A.CONTACT, A.STUD_DATE, A.IP
		  FROM (SELECT ROW_NUMBER() OVER(ORDER BY STUD_NO DESC) AS ROW_NUM, STUD_NO, NICKNAME, TITLE, CONTENT, CREATE_DATE, MODIFY_DATE, HIT, GENDER, REGION, WIDO, GDO, LANG, PEOPLE, CONTACT, STUD_DATE, IP
		          FROM S_GROUP B) A
		 WHERE A.ROW_NUM BETWEEN #{begin} AND #{end}
	</select>
	
	<!-- 코드게시판 조회 -->
	<select id="selectCodeListByMap" parameterType="map" resultType="CodeBoardDTO">
		SELECT A.ROW_NUM, A.CO_NO, A.NICKNAME, A.TITLE, A.CONTENT, A.CREATE_DATE, A.MODIFY_DATE, A.HIT, A.IP
		  FROM (SELECT ROW_NUMBER() OVER(ORDER BY CO_NO DESC) AS ROW_NUM, CO_NO, NICKNAME, TITLE, CONTENT, CREATE_DATE, MODIFY_DATE, HIT, IP
		          FROM C_BOARD) A
		 WHERE A.ROW_NUM BETWEEN #{begin} AND #{end}         
	</select>
	
	<!-- qna게시판 조회 -->
	<select id="selectQnaListByMap" parameterType="map" resultType="QnaBoardDTO">
		SELECT A.ROW_NUM, A.QA_NO, A.NICKNAME, A.TITLE, A.CONTENT, A.CREATE_DATE, A.MODIFY_DATE, A.HIT, A.IP, A.ANSWER
		  FROM (SELECT ROW_NUMBER() OVER(ORDER BY QA_NO DESC) AS ROW_NUM, QA_NO, NICKNAME, TITLE, CONTENT, CREATE_DATE, MODIFY_DATE, HIT, IP, ANSWER
		          FROM Q_BOARD) A 
		 WHERE A.ROW_NUM BETWEEN #{begin} AND #{end}         
	</select>

	<!-- 유저 다중 탈퇴 -->
	
   <insert id="insertRetireUser" parameterType="RetireUserDTO">
      INSERT INTO RETIRE_USERS
         (USER_NO, ID, JOIN_DATE, RETIRE_DATE)
      VALUES
		(#{userNo}, #{id}, #{joinDate}, NOW())
   </insert>
	
	<delete id="deleteUserList" parameterType="List">
		DELETE
		  FROM USERS
		  <where>
		  	USER_NO IN 
		 	<foreach collection="list" item="userNo" open="(" close=")" separator=","> 
		 		#{userNo}
		 	</foreach>
		  </where>
	</delete>
	
	<!-- 스터디게시판 다중 삭제 -->
	<delete id="deleteStudyBoardList" parameterType="List">
		DELETE
		  FROM S_GROUP
		  <where>
		  	 STUD_NO IN
		 	<foreach collection="list" item="studNo" open="(" close=")" separator=",">  
		 		#{studNo}
		 	</foreach>
		  </where>
	</delete>
	
	
	<!-- 자유게시판 다중 삭제 -->
	<delete id="deleteFreeBoardList" parameterType="List">
		DELETE
		  FROM FREEBOARD
		  <where>
		  	 FREE_NO IN
		 	<foreach collection="list" item="freeNo" open="(" close=")" separator=",">  
		 		#{freeNo}
		 	</foreach>
		  </where>
	</delete>
	
	<!-- 코드게시판 다중 삭제  -->
	<delete id="deleteCodeBoardList" parameterType="List">
		DELETE
		  FROM C_BOARD
		 <where>
		 	CO_NO IN
	 		<foreach collection="list" item="coNo" open="(" close=")" separator=",">  
		 		#{coNo}
		 	</foreach>
		 </where> 
	</delete>
	
	<!-- Qna게시판 다중 삭제 -->
	<delete id="deleteQnaBoardList" parameterType="List">
		DELETE
		  FROM Q_BOARD
		 <where>
		 	QA_NO IN
	 		<foreach collection="list" item="qaNo" open="(" close=")" separator=",">  
		 		#{qaNo}
		 	</foreach>
		 </where> 
	</delete>
	
	<!-- 휴면 복구 -->
	
	 <select id="selectSleepUserByNo" parameterType="int" resultType="SleepUserDTO">
	 	SELECT USER_NO, ID, NICKNAME, PW, NAME, GRADE, GENDER, EMAIL, MOBILE, BIRTHYEAR, BIRTHDAY, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, EXTRA_ADDRESS, AGREE_CODE, SNS_TYPE, USER_STATE, JOIN_DATE, LAST_LOGIN_DATE, SLEEP_DATE
	 	  FROM SLEEP_USERS
	 	 WHERE USER_NO = #{userNo}    
	 </select>
	
	
	<delete id="deleteSleepUserList" parameterType="List">
		DELETE
		  FROM SLEEP_USERS
		  <where>
		  	USER_NO IN 
		 	<foreach collection="list" item="userNo" open="(" close=")" separator=",">  <!-- memberNo를 ()로 덮어주고 separator로 구분을해줌(여러개가 나오니까) -->
		 		#{userNo}
		 	</foreach>
		  </where>
	</delete>
	
	<update id="updateAccessInfo" parameterType="String">
		UPDATE ACCESS_LOG
		   SET LAST_LOGIN_DATE = NOW()
		 WHERE ID = #{id}  
	</update>
	
	
	<!--   -->
		
	<delete id="deleteAccessLog" parameterType="String">
		DELETE 
		  FROM ACCESS_LOG
		 WHERE ID = #{id}
	</delete>
	


    
<!-- 	<select id="selectReportUserList" parameterType="map" resultMap="RedBellMap">
		SELECT A.ROW_NUM, A.R_NO, A.ID, A.R_CONTENT, A.R_DATE, A.R_GUBUN, A.R_TARGET, A.S_NO, A.GRP_NICKNAME, A.S_CMT_NO, A.CMT_NICKNAME
		  FROM (SELECT ROW_NUMBER() OVER(ORDER BY R_NO DESC) AS ROW_NUM, R.R_NO, R.ID, R.R_CONTENT, R.R_DATE, R.R_GUBUN, R.R_TARGET, G.S_NO, G.NICKNAME AS GRP_NICKNAME, C.S_CMT_NO, C.NICKNAME AS CMT_NICKNAME
		  		  FROM REDBELL R 
		         RIGHT OUTER JOIN S_GROUP G
		            ON R.R_TARGET = G.S_NO
		         RIGHT OUTER JOIN S_CMT C
		            ON R.R_TARGET = C.S_CMT_NO) A 
		   <where> 
		      <if test="rGubun == 1">
		         R.R_TARGET = #{sNo} 	         
		      </if>
		      <if test="rGubun == 2">
		         R.R_TARGET = #{sCmtNo}  	         
		      </if>
		      AND A.ROW_NUM BETWEEN #{begin} AND #{end} 
      	  </where>
	</select>	 -->
	
		<resultMap type="GrpRedbellDTO" id="GrpRedbellMap">
		<id property="rNo" column="R_NO"/>
		<result property="title" column="TITLE"/>
		<result property="content" column="CONTENT"/>
		<result property="hit" column="HIT"/>
		<result property="ip" column="IP"/>
		<result property="createDate" column="CREATE_DATE"/>
		<result property="modifyDate" column="MODIFY_DATE"/>
		<association property="USERS" javaType="UserDTO">
			<id property="userNo" column="USER_NO"/>
			<result property="id" column="ID"/>
		</association>
		<association property="S_GROUP" javaType="StudyGroupDTO">
			<id property="sNo" column="S_NO"/>
			<result property="nickname" column="NICKNAME"/>
		</association>
		</resultMap>
	
	<!-- R.ID는 모임장 -->
	<select id="selectReportList" parameterType="Map" resultMap="GrpRedbellMap">
	<!-- R.ID 신고당하는사람  R_ID = U_ID -->
		SELECT A.ROW_NUM, A.RED_NO, A.REPORTED,  A.STUD_NO, A.RED_CONTENT, A.RED_DATE, A.REPORTER_ID, A.NICKNAME
		  FROM (SELECT ROW_NUMBER() OVER(ORDER BY R_NO DESC) AS ROW_NUM, R.RED_NO, S.NICKNAME AS REPORTED, R.STUD_NO, R.RED_CONTENT, R.RED_DATE, U.ID AS REPORTER_ID,
		          FROM USERS U 
		         INNER JOIN GRP_REDBELL R
		            ON U.ID = R.ID
		         INNER JOIN S_GROUP S
		            ON R.S_NO = S.S_NO) A
		  WHERE A.ROW_NUM BETWEEN #{begin} AND #{end}           
	</select>
	
	

</mapper>
	
	
	
	